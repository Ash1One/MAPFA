#!/usr/bin/env python
# -*- coding: utf-8 -*-

import logging
import os
import subprocess

from pathlib import Path


def metabat2bin(align_outdir, bam_path, assembly_file, metabat_minlength, threads):
    '''return the path of bin outdir
    '''

    logger = logging.getLogger('mapfa')
    logger.info("making coverage file for metabat2...")
    try:
        subprocess.run(' '.join(['jgi_summarize_bam_contig_depths', ' --outputDepth', os.path.join(
            align_outdir, 'metabat2_depth.txt'), bam_path]), shell=True, check=True)
    except Exception:
        logger.critical(
            "Something wrong when making converage file for metabat2.", exc_info=True)
        raise
    else:
        logger.info("Start binning with metabat2...")
        metabat2_bin_out = os.path.join(
            os.path.dirname(align_outdir), 'metabat2_bins', 'bin')
        try:
            subprocess.run(' '.join(['metabat2', '-t', str(threads), '-i', assembly_file, '-a', os.path.join(align_outdir, 'metabat2_depth.txt'), '-o', metabat2_bin_out, '-m', str(metabat_minlength), '--unbinned']), shell=True, check=True)
        except Exception:
            logger.critical(
                "Something wrong when binning with metabat2...", exc_info=True)
            raise
        else:
            metabat2_bin_outdir = os.path.join(
                os.path.dirname(align_outdir), 'metabat2_bins')
            num_bins = len(list(Path(metabat2_bin_outdir).glob('bin*.fa')))
            logger.info("Success! Total %d bins were generated by metabat2.", num_bins)
            return metabat2_bin_outdir


def maxbin2bin():
    pass


def groopm2bin():
    pass


def concoct2bin():
    pass
