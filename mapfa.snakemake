import os
import yaml


configfile: "config.yaml"

SAMPLES = ['PA2', 'PA4', 'PA5', 'PI2', 'PI3', 'PI5', 'PL1', 'PL3', 'PL5']
'''
cur_abs_path = os.path.abspath(__file__)
config_file = os.path.join(cur_abs_path, 'config.yaml')
config = yaml.load(open(config_file), Loader=yaml.Loader)
'''


rule mapfa:
    input:
        target

#############################################################
#1.1 QC
#############################################################

rule run_fastp:
    input:
        fq_1 = "rawFastq/{sample}_R1.fastq.gz",
        fq_2 = "rawFastq/{sample}_R2.fastq.gz",
    output:
        fq_1 = "qc/{sample}_1.qc.fastq.gz",
        fq_2 = "qc/{sample}_2.qc.fastq.gz",
        json = "qc/{sample}.json",
        html = "qc/{sample}.html",
    params:
        "--compression 6 --detect_adapter_for_pe --cut_front --cut_right --cut_window_size 5 --cut_mean_quality 20 --average_qual 15 --length_required 40 --correction"
    threads:
        10
    shell:
        "fastp -i {input.fq_1} -I {input.fq_2} -o {output.fq_1} -O {output.fq_2} {params} -j {output.json} -h {output.html} -w {threads}"

rule map_to_host:
    input:
        fq_1 = rules.run_fastp.output.fq_1,
        fq_2 = rules.run_fastq.output.fq_2,
    output:
        sam = "tmp/{sample}.map_to_host.sam",
    params:
        host_ref = config['host_ref_index'],
    threads:
        8
    shell:
        "bowtie2 -x {params.host_ref} -1 {input.fq_1} -2 {input.fq_2} -S {wildcards.sample}.sam -p {threads}"

rule host_sam_to_bam:
    input:
        rules.map_to_host.output.sam,
    output:
        bam = "tmp/{sample}.map_to_host.bam",
    params:
        "-bS"
    threads:
        8
    shell:
        "samtools view {params} {input} > {output.bam} -@ {threads}"

rule get_both_end_unmapped_bam:
    input:
        rules.host_sam_to_bam.output.bam,
    output:
        bam = "tmp/{sample}.both_end_unmapped.bam",
    params:
        "-b -f 12 -F 256"
    threads:
        8
    shell:
        "samtools view {params} {input} > {output.bam} -@ {threads}"

rule sort_both_end_unmapped_bam:
    input:
        rules.get_both_end_unmapped_bam.output.bam,
    output:
        bam = "tmp/{sample}.both_end_unmapped.sorted.bam",
    params:
        "-n -o"
    threads:
        8
    shell:
        "samtools sort {params} {output.bam} {input} -@ {threads}"

rule bam_to_fastq:
    input:
        rules.sort_both_end_unmapped_bam.output.bam,
    output:
        fq_1 = "cleanData/{sample}_1.clean.fastq.gz",
        fq_2 = "cleanData/{sample}_2.clean.fastq.gz",
    threads:
        8
    shell:
        "bamToFastq -i {input} -fq {output.fq_1} -fq2 {output.fq_2}"

#############################################################
#1.2 classify cleanData using kraken2
#############################################################


#############################################################
#2. assembly
#############################################################


#############################################################
#2.1 predict ORFs and get genes abundance, difference genes
#############################################################

#############################################################
#2.2 diff genes functional annotation
#############################################################

#############################################################
#2.3 lactobacillus contig genes functional annotation
#############################################################